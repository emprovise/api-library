<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
          "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
          "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">

<!--

  Checkstyle configuration that checks the sun coding conventions from:

    - the Java Language Specification at
      http://java.sun.com/docs/books/jls/second_edition/html/index.html

    - the Sun Code Conventions at http://java.sun.com/docs/codeconv/

    - the Javadoc guidelines at
      http://java.sun.com/j2se/javadoc/writingdoccomments/index.html

    - the JDK Api documentation http://java.sun.com/j2se/docs/api/index.html

    - some best practices

  Checkstyle is very configurable. Be sure to read the documentation at
  http://checkstyle.sf.net (or in your downloaded distribution).

  Most Checks are configurable, be sure to consult the documentation.

  To completely disable a check, just comment it out or delete it from the file.

  Finally, it is worth reading the documentation.

-->

<module name="Checker">
    <property name="charset" value="UTF-8"/>

    <!--
        If you set the basedir property below, then all reported file
        names will be relative to the specified directory. See
        http://checkstyle.sourceforge.net/5.x/config.html#Checker

        <property name="basedir" value="${basedir}"/>
    -->

    <!-- Checks for Size Violations.                    -->
    <!-- See http://checkstyle.sf.net/config_sizes.html -->
    <module name="FileLength">
      <property name="max" value="2000"/>
	</module>
	
    <module name="TreeWalker">

		<!--
		<module name="Regexp">
			<property name="format" value="Calendar\.getInstance"/>
			<property name="message" value="Use of Calendar is discouraged, and use of Calendar.getInstance is forbidden. Please use Clock.now() for a new DateTime and if you must use a calendar use Clock.getUTCCalendar()" />
			<property name="illegalPattern" value="true"/>
		</module>
		-->

        <!-- Checks for Naming Conventions.                  -->
        <!-- See http://checkstyle.sf.net/config_naming.html -->
        <module name="ConstantName"/>
        <module name="LocalFinalVariableName"/>
        <module name="LocalVariableName"/>
        <module name="MemberName"/>
        <module name="MethodName"/>
        <module name="PackageName"/>
        <module name="ParameterName"/>
        <module name="StaticVariableName"/>
        <module name="TypeName"/>

        <!-- Checks for imports                              -->
        <!-- See http://checkstyle.sf.net/config_import.html
        <module name="AvoidStarImport"/> -->
        <module name="IllegalImport"/> <!-- defaults to sun.* packages -->
        <module name="RedundantImport"/>
        <module name="UnusedImports"/>

        <!-- Checks for Size Violations.                    -->
        <!-- See http://checkstyle.sf.net/config_sizes.html -->
        <module name="LineLength">
            <property name="max" value="256"/>
        </module>
        <module name="MethodLength">
            <property name="max" value="150"/>
        </module>
		
		<!-- Checks the number of parameters of a method or constructor -->
		<module name="ParameterNumber">
			<property name="max" value="7"/>
			<property name="tokens" value="METHOD_DEF, CTOR_DEF"/>
		</module>	

		<!-- Checks for whitespace                               -->
        <!-- See http://checkstyle.sf.net/config_whitespace.html -->
		<!-- Check for white space after comma -->
		<!--
		<module name="WhitespaceAfter">
			<property name="tokens" value="COMMA"/>
		</module>
		-->

        <!-- Checks for blocks. You know, those {}'s         -->
        <!-- See http://checkstyle.sf.net/config_blocks.html -->
		
		<!-- Checks for empty catch, do, else, finally, if, for, try, while, instance, static blocks. -->
		<module name="EmptyBlock">
			<property name="option" value="text"/>
			<property name="tokens" value="LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE, LITERAL_FINALLY, LITERAL_IF, LITERAL_FOR, LITERAL_TRY, LITERAL_WHILE, INSTANCE_INIT, STATIC_INIT"/>
		</module>
		
		<!-- Checks for braces around code blocks -->
        <module name="NeedBraces"/>
		
		<!-- Checks for the placement of left curly braces ('{') for code blocks to be at the end of the line -->
		<module name="LeftCurly">
			<property name="option" value="eol"/>
			<property name="tokens" value="CLASS_DEF, CTOR_DEF, INTERFACE_DEF, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE, LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_SWITCH, LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, METHOD_DEF"/>
		</module>
		
        <!-- Checks for common coding problems               -->
        <!-- See http://checkstyle.sf.net/config_coding.html  -->
		<!-- Check for empty statements with rogue ';' -->
        <module name="EmptyStatement"/>
		
        <module name="IllegalInstantiation">
            <property name="classes" value="java.lang.Boolean"/>
        </module>
        
		<!-- Checks for redundant exceptions declared in throws clause such as duplicates, unchecked exceptions or subclasses of another declared exception. -->
        <module name="RedundantThrows">
            <property name="allowUnchecked" value="true" />
        </module>
		
		<!-- Checks that classes that override equals() also override hashCode(). -->
        <module name="EqualsHashCode"/>

		<!-- Nesting depth levels should not exceed above 3 levels -->
        <module name="NestedIfDepth">
            <property name="max" value="3" />
        </module>
		<module name="NestedTryDepth">
			<property name="max" value="3"/>
		</module>
		<module name="NestedForDepth">
			<property name="max" value="3"/>
		</module>

		<!-- Checks that string literals are not used with == or != -->
		<module name="StringLiteralEquality"/>
		
		<!-- Check for ensuring that for loop control variables are not modified inside the for block. -->
		<module name="ModifiedControlVariable"/>

		<!-- check for calls to System.out.println, except in comments -->
        <module name="RegexpSinglelineJava">
            <property name="format" value="System\.out\.println"/>
            <property name="ignoreComments" value="true"/>
        </module>

		<!-- check for calls to printStackTrace, except in comments -->
        <module name="RegexpSinglelineJava">
            <property name="format" value=".*\.printStackTrace\(\)"/>
            <property name="ignoreComments" value="true"/>
        </module>

        <!-- Checks for class design                         -->
        <!-- See http://checkstyle.sf.net/config_design.html -->
		
		<!-- Make sure that utility classes (classes that contain only static methods or fields in their API) do not have a public constructor. -->
        <module name="HideUtilityClassConstructor"/>
		<!-- An interface should describe a type. It is therefore inappropriate to define an interface 
		     that does not contain any methods but only constants -->
		<module name="InterfaceIsType"/>
		
		<!-- Checks that long constants are defined with an upper ell. That is ' L' and not 'l'. -->
		<module name="UpperEll"/>
		
		<!-- Checks there is only one statement per line -->
		<module name="OneStatementPerLine"/>
	
		<!-- Checks for fall through in switch statements Finds locations 
		where a case contains Java code - but lacks a break, return, throw or continue statement. -->
		<module name="FallThrough"/>
	
		<!-- ensure that types are not declared to be thrown, java.lang.Throwable, java.lang.Error, java.lang.RuntimeException -->
		<module name="IllegalThrows"/>
	
		<!-- Catching java.lang.Error is almost never acceptable -->
		<module name="IllegalCatch">
			<property name="illegalClassNames" value="java.lang.Throwable" />
		</module>
	
		<!-- Checks for multiple occurrences of the same string literal within a single file. Maximum duplicate string literals is 3 -->
		<!--
		<module name="MultipleStringLiterals">
			<property name="allowedDuplicates" value="3"/>
		</module>
		-->
    </module>
</module>
